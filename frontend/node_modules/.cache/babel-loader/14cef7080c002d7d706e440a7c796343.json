{"ast":null,"code":"var _jsxFileName = \"/frontend/src/components/SunriseChart.jsx\";\n// src/components/SunriseChart.jsx\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n// Importa adaptadores necesarios si usas fechas\nimport 'chart.js/auto'; // Esto evita errores de módulos faltantes\n\nconst SunriseChart = ({\n  result\n}) => {\n  if (!result || result.length === 0) return null;\n\n  // Función para convertir hora a minutos del día\n  const parseTimeToMinutes = dateString => {\n    const date = new Date(dateString);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  // Agrupa por ubicación\n  const locations = {};\n  result.forEach(item => {\n    const key = `${item.location.name}, ${item.location.country}`;\n    if (!locations[key]) locations[key] = [];\n    locations[key].push({\n      date: item.date,\n      time: parseTimeToMinutes(item.sunrise)\n    });\n  });\n\n  // Prepara etiquetas únicas (fechas)\n  const labels = [...new Set(result.map(item => item.date))];\n\n  // Prepara datasets\n  const datasets = Object.entries(locations).map(([label, values], i) => ({\n    label,\n    data: labels.map(date => {\n      const entry = values.find(v => v.date === date);\n      return entry ? entry.time : null;\n    }),\n    borderColor: i === 0 ? '#3b82f6' : '#10b981',\n    backgroundColor: i === 0 ? '#3b82f6' : '#10b981',\n    tension: 0.3,\n    fill: false\n  }));\n  const chartData = {\n    labels: labels,\n    datasets\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunrise Times by Location'\n      }\n    },\n    scales: {\n      y: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          parser: 'HH:mm',\n          tooltipFormat: 'HH:mm'\n        },\n        ticks: {\n          callback(value) {\n            const hours = Math.floor(value / 60);\n            const minutes = value % 60;\n            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time of Day'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(Bar, {\n    data: chartData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }\n  });\n};\nexport default SunriseChart;","map":{"version":3,"names":["React","Bar","SunriseChart","result","length","parseTimeToMinutes","dateString","date","Date","getHours","getMinutes","locations","forEach","item","key","location","name","country","push","time","sunrise","labels","Set","map","datasets","Object","entries","label","values","i","data","entry","find","v","borderColor","backgroundColor","tension","fill","chartData","options","responsive","plugins","legend","position","title","display","text","scales","y","type","unit","parser","tooltipFormat","ticks","callback","value","hours","Math","floor","minutes","toString","padStart","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/frontend/src/components/SunriseChart.jsx"],"sourcesContent":["// src/components/SunriseChart.jsx\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n// Importa adaptadores necesarios si usas fechas\nimport 'chart.js/auto'; // Esto evita errores de módulos faltantes\n\nconst SunriseChart = ({ result }) => {\n  if (!result || result.length === 0) return null;\n\n  // Función para convertir hora a minutos del día\n  const parseTimeToMinutes = (dateString) => {\n    const date = new Date(dateString);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  // Agrupa por ubicación\n  const locations = {};\n  result.forEach(item => {\n    const key = `${item.location.name}, ${item.location.country}`;\n    if (!locations[key]) locations[key] = [];\n    locations[key].push({\n      date: item.date,\n      time: parseTimeToMinutes(item.sunrise)\n    });\n  });\n\n  // Prepara etiquetas únicas (fechas)\n  const labels = [...new Set(result.map(item => item.date))];\n\n  // Prepara datasets\n  const datasets = Object.entries(locations).map(([label, values], i) => ({\n    label,\n    data: labels.map(date => {\n      const entry = values.find(v => v.date === date);\n      return entry ? entry.time : null;\n    }),\n    borderColor: i === 0 ? '#3b82f6' : '#10b981',\n    backgroundColor: i === 0 ? '#3b82f6' : '#10b981',\n    tension: 0.3,\n    fill: false\n  }));\n\n  const chartData = {\n    labels: labels,\n    datasets\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunrise Times by Location'\n      }\n    },\n    scales: {\n      y: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          parser: 'HH:mm',\n          tooltipFormat: 'HH:mm'\n        },\n        ticks: {\n          callback(value) {\n            const hours = Math.floor(value / 60);\n            const minutes = value % 60;\n            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time of Day'\n        }\n      }\n    }\n  };\n\n  return <Bar data={chartData} options={options} />;\n};\n\nexport default SunriseChart;"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,iBAAiB;;AAErC;AACA,OAAO,eAAe,CAAC,CAAC;;AAExB,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EACnC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;;EAE/C;EACA,MAAMC,kBAAkB,GAAIC,UAAU,IAAK;IACzC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,OAAOC,IAAI,CAACE,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAGF,IAAI,CAACG,UAAU,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpBR,MAAM,CAACS,OAAO,CAACC,IAAI,IAAI;IACrB,MAAMC,GAAG,GAAG,GAAGD,IAAI,CAACE,QAAQ,CAACC,IAAI,KAAKH,IAAI,CAACE,QAAQ,CAACE,OAAO,EAAE;IAC7D,IAAI,CAACN,SAAS,CAACG,GAAG,CAAC,EAAEH,SAAS,CAACG,GAAG,CAAC,GAAG,EAAE;IACxCH,SAAS,CAACG,GAAG,CAAC,CAACI,IAAI,CAAC;MAClBX,IAAI,EAAEM,IAAI,CAACN,IAAI;MACfY,IAAI,EAAEd,kBAAkB,CAACQ,IAAI,CAACO,OAAO;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,MAAM,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACnB,MAAM,CAACoB,GAAG,CAACV,IAAI,IAAIA,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAMiB,QAAQ,GAAGC,MAAM,CAACC,OAAO,CAACf,SAAS,CAAC,CAACY,GAAG,CAAC,CAAC,CAACI,KAAK,EAAEC,MAAM,CAAC,EAAEC,CAAC,MAAM;IACtEF,KAAK;IACLG,IAAI,EAAET,MAAM,CAACE,GAAG,CAAChB,IAAI,IAAI;MACvB,MAAMwB,KAAK,GAAGH,MAAM,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1B,IAAI,KAAKA,IAAI,CAAC;MAC/C,OAAOwB,KAAK,GAAGA,KAAK,CAACZ,IAAI,GAAG,IAAI;IAClC,CAAC,CAAC;IACFe,WAAW,EAAEL,CAAC,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;IAC5CM,eAAe,EAAEN,CAAC,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;IAChDO,OAAO,EAAE,GAAG;IACZC,IAAI,EAAE;EACR,CAAC,CAAC,CAAC;EAEH,MAAMC,SAAS,GAAG;IAChBjB,MAAM,EAAEA,MAAM;IACdG;EACF,CAAC;EAED,MAAMe,OAAO,GAAG;IACdC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;MACR;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,MAAM;QACZ9B,IAAI,EAAE;UACJ+B,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAE,OAAO;UACfC,aAAa,EAAE;QACjB,CAAC;QACDC,KAAK,EAAE;UACLC,QAAQA,CAACC,KAAK,EAAE;YACd,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,GAAG,EAAE,CAAC;YACpC,MAAMI,OAAO,GAAGJ,KAAK,GAAG,EAAE;YAC1B,OAAO,GAAGC,KAAK,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UACtF;QACF,CAAC;QACDjB,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF;IACF;EACF,CAAC;EAED,oBAAO9C,KAAA,CAAA8D,aAAA,CAAC7D,GAAG;IAAC6B,IAAI,EAAEQ,SAAU;IAACC,OAAO,EAAEA,OAAQ;IAAAwB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC;AACnD,CAAC;AAED,eAAelE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}