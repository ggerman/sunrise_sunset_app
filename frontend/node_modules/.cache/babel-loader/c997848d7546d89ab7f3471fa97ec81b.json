{"ast":null,"code":"var _jsxFileName = \"/frontend/src/components/SunriseChart.jsx\";\n// src/components/SunriseChart.jsx\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n// Importa adaptadores necesarios si usas fechas\nimport 'chart.js/auto'; // Esto evita errores de módulos faltantes\n\nconst result = [{\n  location: {\n    name: \"Paraná\",\n    country: \"Brazil\"\n  },\n  date: \"2025-05-11\",\n  sunrise: \"2025-05-23T06:55:00.000Z\",\n  golden_hour: \"2025-05-23T17:22:44.000Z\",\n  sunset: \"2025-05-23T17:54:55.000Z\"\n}, {\n  location: {\n    name: \"Paraná\",\n    country: \"Argentina\"\n  },\n  date: \"2025-05-11\",\n  sunrise: \"2025-05-23T07:19:22.000Z\",\n  golden_hour: \"2025-05-23T17:36:37.000Z\",\n  sunset: \"2025-05-23T18:09:48.000Z\"\n}];\nconst chartData = {\n  labels: [\"2025-05-11\"],\n  datasets: [{\n    label: \"Sunrise - Paraná, Brazil\",\n    data: [parseTime(\"2025-05-23T06:55:00.000Z\")],\n    borderColor: \"#3b82f6\",\n    backgroundColor: \"#3b82f6\"\n  }, {\n    label: \"Sunrise - Paraná, Argentina\",\n    data: [parseTime(\"2025-05-23T07:19:22.000Z\")],\n    borderColor: \"#10b981\",\n    backgroundColor: \"#10b981\"\n  }]\n};\nfunction parseTime(dateString) {\n  const date = new Date(dateString);\n  return date.getHours() * 60 + date.getMinutes(); // minutos desde medianoche\n}\nconst SunriseChart = ({\n  result\n}) => {\n  if (!result || result.length === 0) return null;\n\n  // Función para convertir hora a minutos del día\n  const parseTimeToMinutes = dateString => {\n    const date = new Date(dateString);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  // Agrupa por ubicación\n  const locations = {};\n  result.forEach(item => {\n    const key = `${item.location.name}, ${item.location.country}`;\n    if (!locations[key]) locations[key] = [];\n    locations[key].push({\n      date: item.date,\n      time: parseTimeToMinutes(item.sunrise)\n    });\n  });\n\n  // Prepara etiquetas únicas (fechas)\n  const labels = [...new Set(result.map(item => item.date))];\n\n  // Prepara datasets\n  const datasets = Object.entries(locations).map(([label, values], i) => ({\n    label,\n    data: labels.map(date => {\n      const entry = values.find(v => v.date === date);\n      return entry ? entry.time : null;\n    }),\n    borderColor: i === 0 ? '#3b82f6' : '#10b981',\n    backgroundColor: i === 0 ? '#3b82f6' : '#10b981',\n    tension: 0.3,\n    fill: false\n  }));\n  const chartData = {\n    labels: labels,\n    datasets\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunrise Times by Location'\n      }\n    },\n    scales: {\n      y: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          parser: 'HH:mm',\n          tooltipFormat: 'HH:mm'\n        },\n        ticks: {\n          callback(value) {\n            const hours = Math.floor(value / 60);\n            const minutes = value % 60;\n            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time of Day'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(Bar, {\n    data: chartData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  });\n};\nexport default SunriseChart;","map":{"version":3,"names":["React","Bar","result","location","name","country","date","sunrise","golden_hour","sunset","chartData","labels","datasets","label","data","parseTime","borderColor","backgroundColor","dateString","Date","getHours","getMinutes","SunriseChart","length","parseTimeToMinutes","locations","forEach","item","key","push","time","Set","map","Object","entries","values","i","entry","find","v","tension","fill","options","responsive","plugins","legend","position","title","display","text","scales","y","type","unit","parser","tooltipFormat","ticks","callback","value","hours","Math","floor","minutes","toString","padStart","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/frontend/src/components/SunriseChart.jsx"],"sourcesContent":["// src/components/SunriseChart.jsx\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n// Importa adaptadores necesarios si usas fechas\nimport 'chart.js/auto'; // Esto evita errores de módulos faltantes\n\n\nconst result = [\n  {\n    location: { name: \"Paraná\", country: \"Brazil\" },\n    date: \"2025-05-11\",\n    sunrise: \"2025-05-23T06:55:00.000Z\",\n    golden_hour: \"2025-05-23T17:22:44.000Z\",\n    sunset: \"2025-05-23T17:54:55.000Z\"\n  },\n  {\n    location: { name: \"Paraná\", country: \"Argentina\" },\n    date: \"2025-05-11\",\n    sunrise: \"2025-05-23T07:19:22.000Z\",\n    golden_hour: \"2025-05-23T17:36:37.000Z\",\n    sunset: \"2025-05-23T18:09:48.000Z\"\n  }\n];\n\nconst chartData = {\n  labels: [\"2025-05-11\"],\n  datasets: [\n    {\n      label: \"Sunrise - Paraná, Brazil\",\n      data: [parseTime(\"2025-05-23T06:55:00.000Z\")],\n      borderColor: \"#3b82f6\",\n      backgroundColor: \"#3b82f6\",\n    },\n    {\n      label: \"Sunrise - Paraná, Argentina\",\n      data: [parseTime(\"2025-05-23T07:19:22.000Z\")],\n      borderColor: \"#10b981\",\n      backgroundColor: \"#10b981\",\n    }\n  ]\n};\n\nfunction parseTime(dateString) {\n  const date = new Date(dateString);\n  return date.getHours() * 60 + date.getMinutes(); // minutos desde medianoche\n}\n\nconst SunriseChart = ({ result }) => {\n  if (!result || result.length === 0) return null;\n\n  // Función para convertir hora a minutos del día\n  const parseTimeToMinutes = (dateString) => {\n    const date = new Date(dateString);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  // Agrupa por ubicación\n  const locations = {};\n  result.forEach(item => {\n    const key = `${item.location.name}, ${item.location.country}`;\n    if (!locations[key]) locations[key] = [];\n    locations[key].push({\n      date: item.date,\n      time: parseTimeToMinutes(item.sunrise)\n    });\n  });\n\n  // Prepara etiquetas únicas (fechas)\n  const labels = [...new Set(result.map(item => item.date))];\n\n  // Prepara datasets\n  const datasets = Object.entries(locations).map(([label, values], i) => ({\n    label,\n    data: labels.map(date => {\n      const entry = values.find(v => v.date === date);\n      return entry ? entry.time : null;\n    }),\n    borderColor: i === 0 ? '#3b82f6' : '#10b981',\n    backgroundColor: i === 0 ? '#3b82f6' : '#10b981',\n    tension: 0.3,\n    fill: false\n  }));\n\n  const chartData = {\n    labels: labels,\n    datasets\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sunrise Times by Location'\n      }\n    },\n    scales: {\n      y: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          parser: 'HH:mm',\n          tooltipFormat: 'HH:mm'\n        },\n        ticks: {\n          callback(value) {\n            const hours = Math.floor(value / 60);\n            const minutes = value % 60;\n            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time of Day'\n        }\n      }\n    }\n  };\n\n  return <Bar data={chartData} options={options} />;\n};\n\nexport default SunriseChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}