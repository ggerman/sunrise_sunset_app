{"ast":null,"code":"var _jsxFileName = \"/frontend/src/components/SunriseChart.jsx\";\n// src/components/SunriseChart.jsx\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nconst SunriseChart = ({\n  result\n}) => {\n  if (!result || result.length === 0) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 46\n    }\n  }, \"No data available\");\n\n  // Función para convertir hora a HH:mm\n  const formatTime = dateString => {\n    const date = new Date(dateString);\n    return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n  };\n\n  // Preparar datos para Recharts\n  const chartData = result.map((item, index) => ({\n    name: item.date,\n    [`Sunrise - ${item.location.name}, ${item.location.country}`]: formatTime(item.sunrise)\n  }));\n\n  // Obtener claves dinámicas (una por ubicación)\n  const keys = [...new Set(result.map(item => `Sunrise - ${item.location.name}, ${item.location.country}`))];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), keys.map((key, i) => /*#__PURE__*/React.createElement(Line, {\n    key: key,\n    type: \"monotone\",\n    dataKey: key,\n    stroke: i === 0 ? '#3b82f6' : '#10b981',\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default SunriseChart;","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","SunriseChart","result","length","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","formatTime","dateString","date","Date","getHours","toString","padStart","getMinutes","chartData","map","item","index","name","location","country","sunrise","keys","Set","style","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","key","i","type","stroke","activeDot","r"],"sources":["/frontend/src/components/SunriseChart.jsx"],"sourcesContent":["// src/components/SunriseChart.jsx\nimport React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nconst SunriseChart = ({ result }) => {\n  if (!result || result.length === 0) return <p>No data available</p>;\n\n  // Función para convertir hora a HH:mm\n  const formatTime = (dateString) => {\n    const date = new Date(dateString);\n    return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n  };\n\n  // Preparar datos para Recharts\n  const chartData = result.map((item, index) => ({\n    name: item.date,\n    [`Sunrise - ${item.location.name}, ${item.location.country}`]: formatTime(item.sunrise)\n  }));\n\n  // Obtener claves dinámicas (una por ubicación)\n  const keys = [...new Set(result.map(item => `Sunrise - ${item.location.name}, ${item.location.country}`))];\n\n  return (\n    <div style={{ width: '100%', height: 400 }}>\n      <ResponsiveContainer>\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n\n          {keys.map((key, i) => (\n            <Line\n              key={key}\n              type=\"monotone\"\n              dataKey={key}\n              stroke={i === 0 ? '#3b82f6' : '#10b981'}\n              activeDot={{ r: 8 }}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SunriseChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}